{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the NanoRv32  project\n\n\nUnder construction\n\n\nA small 32-bit implementation of the RISC-V architecture\nHighlights :\n    - 2-stage pipeline (fetch, execute)\n    - lot of code is generated from a high level description\n    - written in verilog (using iverilog or Xilinx xvsim as simulator)\n\n\nStill under development\n  - currently supporting only RV32I base instructions (no scall,sbreak,rd*)\n  - No interrupt support yet\n\n\nFPGA version available (Digilent ARTY board - Xilinx Artix7)\n\n\nProject layout\n\n\nOutdated\n\n\ncommon/files  # scripts to generate list of verilog files needed for the various targets (simulation, synthesis)\ncommon/generators # generator for some verilog constructs (like decoder, parameters,...)\ncommon/include    # C/asm include files (for riscv-tests for example)\ncommon/instructions # text files listing instructions, for regression testing\ncommon/linker_scripts # linker script(s) for C and asm programs\ncommon/makefile # shared Makefile\ncommon/scripts  # Miscelaneous scripts\ncommon/spec # architecture/instruction specification as Python data structures\ncommon/startup # C/asm startup file\nctests/* # Various tests written in C\ndoc_riscv # General Riscv documentation from Internet (when Internet is not available :-) )\ndocs # mkdocs source files (this documentation !) see (www.mkdocs.org)\ngenerated # various generated files from generators\n\n\nriscv-opcodes # imported github module, used to create some spec files\n\nctests/* # Various tests written in C\ndoc_riscv # General Riscv documentation from Internet (when Internet is not available :-) )\ndocs # mkdocs source files (this documentation !) see (www.mkdocs.org)\ngenerated # various generated files from generators\n\n\nriscv-opcodes # imported github module, used to create some spec files\nriscv-test    # imported github module, various test programs for the riscv architecture\n\n\n\nips           # Modules created using Xilinx Vivado\nrtl           # Verilog RTL files for the project\nsim           # Verilog simulation directory\nsynt          # synthesis directory\nverilator_sim # Verilator build/simulation directory\nsoftware      # Local testsuites (asm/c programs)\nimport        # imported github submodules (currently only amba_components)\ndocs          # the mkdocs/markdown sources for this site\nsite          # generated html/js files for this site\n\n\n\nInstallation\n\n\nCloning from github\n\n\nThis project uses submodules. To clone it you need to run the following commands :\n\n\n git clone git@github.com:rbarzic/nanorv32.git\n cd nanorv32\n git submodule init\n git submodule update\n\n\n\n\nTBD : check --recursive option for clone (from which git version this is available)\n\n\nSetting environment variables\n\n\nCompiling test programs\n\n\nTest programs are located under the software directory.\n\n\nTo compile, enter the directory of the program and type :\n\nmake all\n\n\nSeveral files (bin, hex, vmem and vmem32,..) should be created\n\n\nSimulation  using Icarus iverilog\n\n\nGo into a test program directory (under software/xxx) then :\n\n\n# Compile C code\nmake all\n# build iverilog simulator files\nmake comp\n# run the simulation\nmake run\n\n# optionaly, you can look at waveform using gtkwave\nmake wave\n\n\n\n\nNote : there is no way to stop the simulation from the C code\ncurrently. Hit Ctrl-c then type $finish to exit simulation\n\n\nSynthesis using Vivado\n\n\nSimulation  using Vivado\n\n\nSimulation  using Verilator", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-the-nanorv32-project", 
            "text": "Under construction  A small 32-bit implementation of the RISC-V architecture\nHighlights :\n    - 2-stage pipeline (fetch, execute)\n    - lot of code is generated from a high level description\n    - written in verilog (using iverilog or Xilinx xvsim as simulator)  Still under development\n  - currently supporting only RV32I base instructions (no scall,sbreak,rd*)\n  - No interrupt support yet  FPGA version available (Digilent ARTY board - Xilinx Artix7)", 
            "title": "Welcome to the NanoRv32  project"
        }, 
        {
            "location": "/#project-layout", 
            "text": "Outdated  common/files  # scripts to generate list of verilog files needed for the various targets (simulation, synthesis)\ncommon/generators # generator for some verilog constructs (like decoder, parameters,...)\ncommon/include    # C/asm include files (for riscv-tests for example)\ncommon/instructions # text files listing instructions, for regression testing\ncommon/linker_scripts # linker script(s) for C and asm programs\ncommon/makefile # shared Makefile\ncommon/scripts  # Miscelaneous scripts\ncommon/spec # architecture/instruction specification as Python data structures\ncommon/startup # C/asm startup file\nctests/* # Various tests written in C\ndoc_riscv # General Riscv documentation from Internet (when Internet is not available :-) )\ndocs # mkdocs source files (this documentation !) see (www.mkdocs.org)\ngenerated # various generated files from generators\n\n\nriscv-opcodes # imported github module, used to create some spec files\n\nctests/* # Various tests written in C\ndoc_riscv # General Riscv documentation from Internet (when Internet is not available :-) )\ndocs # mkdocs source files (this documentation !) see (www.mkdocs.org)\ngenerated # various generated files from generators\n\n\nriscv-opcodes # imported github module, used to create some spec files\nriscv-test    # imported github module, various test programs for the riscv architecture\n\n\n\nips           # Modules created using Xilinx Vivado\nrtl           # Verilog RTL files for the project\nsim           # Verilog simulation directory\nsynt          # synthesis directory\nverilator_sim # Verilator build/simulation directory\nsoftware      # Local testsuites (asm/c programs)\nimport        # imported github submodules (currently only amba_components)\ndocs          # the mkdocs/markdown sources for this site\nsite          # generated html/js files for this site", 
            "title": "Project layout"
        }, 
        {
            "location": "/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/#cloning-from-github", 
            "text": "This project uses submodules. To clone it you need to run the following commands :   git clone git@github.com:rbarzic/nanorv32.git\n cd nanorv32\n git submodule init\n git submodule update  TBD : check --recursive option for clone (from which git version this is available)", 
            "title": "Cloning from github"
        }, 
        {
            "location": "/#setting-environment-variables", 
            "text": "", 
            "title": "Setting environment variables"
        }, 
        {
            "location": "/#compiling-test-programs", 
            "text": "Test programs are located under the software directory.  To compile, enter the directory of the program and type : make all  Several files (bin, hex, vmem and vmem32,..) should be created", 
            "title": "Compiling test programs"
        }, 
        {
            "location": "/#simulation-using-icarus-iverilog", 
            "text": "Go into a test program directory (under software/xxx) then :  # Compile C code\nmake all\n# build iverilog simulator files\nmake comp\n# run the simulation\nmake run\n\n# optionaly, you can look at waveform using gtkwave\nmake wave  Note : there is no way to stop the simulation from the C code\ncurrently. Hit Ctrl-c then type $finish to exit simulation", 
            "title": "Simulation  using Icarus iverilog"
        }, 
        {
            "location": "/#synthesis-using-vivado", 
            "text": "", 
            "title": "Synthesis using Vivado"
        }, 
        {
            "location": "/#simulation-using-vivado", 
            "text": "", 
            "title": "Simulation  using Vivado"
        }, 
        {
            "location": "/#simulation-using-verilator", 
            "text": "", 
            "title": "Simulation  using Verilator"
        }
    ]
}