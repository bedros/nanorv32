{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the NanoRv32  project\n\n\nUnder construction\n\n\nA small 32-bit implementation of the RISC-V architecture\nHighlights :\n\n\n\n\n2-stage pipeline (fetch, execute)\n\n\nlot of code is generated from a high level description\n\n\nwritten in verilog (using iverilog or Xilinx xvsim as simulator)\n\n\n\n\nStill under development :\n  - currently supporting only RV32I base instructions (no scall,sbreak,rd*)\n  - no system register implemented\n  - No interrupt support yet\n  - no RVC support (16-bit instructions)\n\n\nFPGA version available (Digilent ARTY board - Xilinx Artix7)\n\n\nProject layout\n\n\ncommon/files  # scripts to generate list of verilog files needed for the various targets (simulation, synthesis)\ncommon/generators # generator for some verilog constructs (like decoder, parameters,...)\ncommon/include    # C/asm include files (for riscv-tests for example)\ncommon/instructions # text files listing instructions, for regression testing\ncommon/linker_scripts # linker script(s) for C and asm programs\ncommon/makefile # shared Makefile\ncommon/scripts  # Miscelaneous scripts\ncommon/spec # architecture/instruction specification as Python data structures\ncommon/startup # C/asm startup file\nctests/* # Various tests written in C\ndoc_riscv # General Riscv documentation from Internet (when Internet is not available :-) )\ndocs # mkdocs source files (this documentation !) see (www.mkdocs.org)\ngenerated # various generated files from generators\nriscv-opcodes # imported github module, used to create some spec files\nriscv-test    # imported github module, various test programs for the riscv architecture\nrtl/cores     # the nanorv32 CPU files\nrtl/ips       # \"IP\" verilog models (memory, peripherals, bus interfaces,....)\nrtl/chips     # top-level and \"chip\" specific files\nsim/verilog   # main directory for verilog simulation using iverilog or Xilinx\nsynt/fpga     # main directory for FPGA synthesis using Xilinx Vivado\n\n\n\nInstallation\n\n\nCloning from github\n\n\nThis project uses submodules. To clone it you need to run the following commands :\n\n\ngit clone --recursive git@github.com:rbarzic/nanorv32.git nanorv32-clean\n\n\n\n\n/opt/riscv32i\n\n\nOn debian/Unbuntu :\n\n\nsudo apt-get install build-essential gtkwave\n\n\n\n\nIcarus verilog\n\n\nUsing  the latest version from github is recommended.\n\n\nSee https://github.com/steveicarus/iverilog\n\n\nRiscv32 gcc\n\n\nA 32-bit version of the toolchain is needed.\n\n\nSee https://github.com/ucb-bar/riscv-sodor#building-a-rv32i-toolchain.\n\n\nFor example :\n\n\n$ sudo mkdir -p /opt/riscv32i\n$ sudo chown $USER /opt/riscv32i\n$ git clone git@github.com:riscv/riscv-gnu-toolchain.git\n$ cd riscv-gnu-toolchain\n$ mkdir build; cd build\n$ ../configure --prefix=/opt/riscv32i  --disable-float --disable-atomic --with-xlen=32 --with-arch=I\n$ make install\n\n\n\n\nOthers\n\n\nTo run the regression on multiple cores at a time, you need GNU parallel.\n\n\nOn debian/Unbuntu :\n\n\nsudo apt-get install parallel\n\n\n\n\nSimulation  using Icarus iverilog\n\n\nVerilog compilation\n\n\ncd sim/verilog\nmake compile\n\n\n\n\nNote : the file iverilog_file_list.txt is generated from the file common/files/nanorv32_fl.py.\nIf you need to add verilog files to the project, you should add them to the nanorv32_fl.py file instead and run :\n\n\nmake iverilog_file_list.txt\n\n\n\n\nSimulation\n\n\nRunning a test from the riscv-tests/isa/rv32ui list\n\n\nUnder sim/verilog :\n\n\nmake run_rv32ui TEST=\ntest_name\n\n\n\n\n\n\nFor example :\n\n\nmake run_rv32ui TEST=addi\n\n\n\n\nRunning a C-based test\n\n\nC programs are expected to be stored under the ctests/\n/\n.c\n\n\nUnder sim/verilog :\n\n\nmake run_ctest TEST=\ntest_name\n\n\n\n\n\n\nFor example :\n\n\nmake run_ctest TEST=gpio_toggle\n\n\n\n\nViewing the waveform\n\n\nUsing gtkwave :\n\n\nmake wave\n\n\n\n\nSynthesis using Vivado\n\n\nFirst, set-up Vivado environment :\n\n\nsource /opt/Xilinx/Vivado/\nvivado version\n/settings64.sh\n\n\n\n\nThen\n\n\nmake synt\n\n\n\n\nNote : The code is loaded in the ROM using the file\nsynt/fpga/code.hex. So you must make a link between a existing *.hex2 file to\nthe code.hex before launching the synthesis.\n\n\nSimulation  using Vivado\n\n\nCompilation\n\n\nmake xcomp\nmake xelab\n\n\n\n\nSimulation (Batch mode)\n\n\nmake xsim\n\n\n\n\nSimulation (GUI)\n\n\nmake xsim_gui\n\n\n\n\nSimulation  using Verilator\n\n\nTBD", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-the-nanorv32-project", 
            "text": "Under construction  A small 32-bit implementation of the RISC-V architecture\nHighlights :   2-stage pipeline (fetch, execute)  lot of code is generated from a high level description  written in verilog (using iverilog or Xilinx xvsim as simulator)   Still under development :\n  - currently supporting only RV32I base instructions (no scall,sbreak,rd*)\n  - no system register implemented\n  - No interrupt support yet\n  - no RVC support (16-bit instructions)  FPGA version available (Digilent ARTY board - Xilinx Artix7)", 
            "title": "Welcome to the NanoRv32  project"
        }, 
        {
            "location": "/#project-layout", 
            "text": "common/files  # scripts to generate list of verilog files needed for the various targets (simulation, synthesis)\ncommon/generators # generator for some verilog constructs (like decoder, parameters,...)\ncommon/include    # C/asm include files (for riscv-tests for example)\ncommon/instructions # text files listing instructions, for regression testing\ncommon/linker_scripts # linker script(s) for C and asm programs\ncommon/makefile # shared Makefile\ncommon/scripts  # Miscelaneous scripts\ncommon/spec # architecture/instruction specification as Python data structures\ncommon/startup # C/asm startup file\nctests/* # Various tests written in C\ndoc_riscv # General Riscv documentation from Internet (when Internet is not available :-) )\ndocs # mkdocs source files (this documentation !) see (www.mkdocs.org)\ngenerated # various generated files from generators\nriscv-opcodes # imported github module, used to create some spec files\nriscv-test    # imported github module, various test programs for the riscv architecture\nrtl/cores     # the nanorv32 CPU files\nrtl/ips       # \"IP\" verilog models (memory, peripherals, bus interfaces,....)\nrtl/chips     # top-level and \"chip\" specific files\nsim/verilog   # main directory for verilog simulation using iverilog or Xilinx\nsynt/fpga     # main directory for FPGA synthesis using Xilinx Vivado", 
            "title": "Project layout"
        }, 
        {
            "location": "/#installation", 
            "text": "Cloning from github  This project uses submodules. To clone it you need to run the following commands :  git clone --recursive git@github.com:rbarzic/nanorv32.git nanorv32-clean  /opt/riscv32i  On debian/Unbuntu :  sudo apt-get install build-essential gtkwave  Icarus verilog  Using  the latest version from github is recommended.  See https://github.com/steveicarus/iverilog  Riscv32 gcc  A 32-bit version of the toolchain is needed.  See https://github.com/ucb-bar/riscv-sodor#building-a-rv32i-toolchain.  For example :  $ sudo mkdir -p /opt/riscv32i\n$ sudo chown $USER /opt/riscv32i\n$ git clone git@github.com:riscv/riscv-gnu-toolchain.git\n$ cd riscv-gnu-toolchain\n$ mkdir build; cd build\n$ ../configure --prefix=/opt/riscv32i  --disable-float --disable-atomic --with-xlen=32 --with-arch=I\n$ make install  Others  To run the regression on multiple cores at a time, you need GNU parallel.  On debian/Unbuntu :  sudo apt-get install parallel", 
            "title": "Installation"
        }, 
        {
            "location": "/#simulation-using-icarus-iverilog", 
            "text": "Verilog compilation  cd sim/verilog\nmake compile  Note : the file iverilog_file_list.txt is generated from the file common/files/nanorv32_fl.py.\nIf you need to add verilog files to the project, you should add them to the nanorv32_fl.py file instead and run :  make iverilog_file_list.txt  Simulation  Running a test from the riscv-tests/isa/rv32ui list  Under sim/verilog :  make run_rv32ui TEST= test_name   For example :  make run_rv32ui TEST=addi  Running a C-based test  C programs are expected to be stored under the ctests/ / .c  Under sim/verilog :  make run_ctest TEST= test_name   For example :  make run_ctest TEST=gpio_toggle  Viewing the waveform  Using gtkwave :  make wave", 
            "title": "Simulation  using Icarus iverilog"
        }, 
        {
            "location": "/#synthesis-using-vivado", 
            "text": "First, set-up Vivado environment :  source /opt/Xilinx/Vivado/ vivado version /settings64.sh  Then  make synt  Note : The code is loaded in the ROM using the file\nsynt/fpga/code.hex. So you must make a link between a existing *.hex2 file to\nthe code.hex before launching the synthesis.", 
            "title": "Synthesis using Vivado"
        }, 
        {
            "location": "/#simulation-using-vivado", 
            "text": "Compilation  make xcomp\nmake xelab  Simulation (Batch mode)  make xsim  Simulation (GUI)  make xsim_gui", 
            "title": "Simulation  using Vivado"
        }, 
        {
            "location": "/#simulation-using-verilator", 
            "text": "TBD", 
            "title": "Simulation  using Verilator"
        }
    ]
}